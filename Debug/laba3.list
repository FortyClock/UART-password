
laba3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08003830  08003830  00004830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ac  080039ac  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b4  080039b4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000049b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000060  08003a18  00005060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08003a18  00005270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cef9  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002406  00000000  00000000  00011f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00014388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a70  00000000  00000000  000150f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aa3  00000000  00000000  00015b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef45  00000000  00000000  0002d603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f6d  00000000  00000000  0003c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c44b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003888  00000000  00000000  000c44f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c7d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003818 	.word	0x08003818

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003818 	.word	0x08003818

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b24      	ldr	r3, [pc, #144]	@ (8000204 <MX_GPIO_Init+0xa8>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a23      	ldr	r2, [pc, #140]	@ (8000204 <MX_GPIO_Init+0xa8>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b21      	ldr	r3, [pc, #132]	@ (8000204 <MX_GPIO_Init+0xa8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b1e      	ldr	r3, [pc, #120]	@ (8000204 <MX_GPIO_Init+0xa8>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a1d      	ldr	r2, [pc, #116]	@ (8000204 <MX_GPIO_Init+0xa8>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b1b      	ldr	r3, [pc, #108]	@ (8000204 <MX_GPIO_Init+0xa8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b18      	ldr	r3, [pc, #96]	@ (8000204 <MX_GPIO_Init+0xa8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a17      	ldr	r2, [pc, #92]	@ (8000204 <MX_GPIO_Init+0xa8>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b15      	ldr	r3, [pc, #84]	@ (8000204 <MX_GPIO_Init+0xa8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b12      	ldr	r3, [pc, #72]	@ (8000204 <MX_GPIO_Init+0xa8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a11      	ldr	r2, [pc, #68]	@ (8000204 <MX_GPIO_Init+0xa8>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000204 <MX_GPIO_Init+0xa8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d6:	480c      	ldr	r0, [pc, #48]	@ (8000208 <MX_GPIO_Init+0xac>)
 80001d8:	f001 f95c 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 80001dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e2:	2301      	movs	r3, #1
 80001e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80001ee:	f107 0310 	add.w	r3, r7, #16
 80001f2:	4619      	mov	r1, r3
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <MX_GPIO_Init+0xac>)
 80001f6:	f000 ffd1 	bl	800119c <HAL_GPIO_Init>

}
 80001fa:	bf00      	nop
 80001fc:	3720      	adds	r7, #32
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40021000 	.word	0x40021000
 8000208:	40011000 	.word	0x40011000

0800020c <Flash_Write_HalfWord>:
// Базовый адрес Flash (0x08000000)
#define FLASH_BASE_ADDR         (0x08000000UL)
// Адрес последней страницы (например, Page 30)
#define FLASH_USER_START_ADDR   (FLASH_BASE_ADDR + (31 * FLASH_PAGE_SIZE))

void Flash_Write_HalfWord(uint32_t address, uint16_t data) {
 800020c:	b5b0      	push	{r4, r5, r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status;
    uint32_t pageError = 0;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitTypeDef eraseInitStruct;

    // Разблокировка Flash
    HAL_FLASH_Unlock();
 800021c:	f000 fe2e 	bl	8000e7c <HAL_FLASH_Unlock>

    // Настройка структуры для стирания страницы
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000220:	2300      	movs	r3, #0
 8000222:	60bb      	str	r3, [r7, #8]
    eraseInitStruct.PageAddress = FLASH_USER_START_ADDR;
 8000224:	4b12      	ldr	r3, [pc, #72]	@ (8000270 <Flash_Write_HalfWord+0x64>)
 8000226:	613b      	str	r3, [r7, #16]
    eraseInitStruct.NbPages = 1;  // Стираем только одну страницу
 8000228:	2301      	movs	r3, #1
 800022a:	617b      	str	r3, [r7, #20]

    // Стирание страницы
    status = HAL_FLASHEx_Erase(&eraseInitStruct, &pageError);
 800022c:	f107 0218 	add.w	r2, r7, #24
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	4611      	mov	r1, r2
 8000236:	4618      	mov	r0, r3
 8000238:	f000 ff08 	bl	800104c <HAL_FLASHEx_Erase>
 800023c:	4603      	mov	r3, r0
 800023e:	77fb      	strb	r3, [r7, #31]
    if (status != HAL_OK) {
 8000240:	7ffb      	ldrb	r3, [r7, #31]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <Flash_Write_HalfWord+0x40>
        HAL_FLASH_Lock();  // Блокировка Flash в случае ошибки
 8000246:	f000 fe3f 	bl	8000ec8 <HAL_FLASH_Lock>
 800024a:	e00d      	b.n	8000268 <Flash_Write_HalfWord+0x5c>
        return;
    }

    // Запись 16-битного слова (полуслова)
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, data);
 800024c:	887b      	ldrh	r3, [r7, #2]
 800024e:	2200      	movs	r2, #0
 8000250:	461c      	mov	r4, r3
 8000252:	4615      	mov	r5, r2
 8000254:	4622      	mov	r2, r4
 8000256:	462b      	mov	r3, r5
 8000258:	6879      	ldr	r1, [r7, #4]
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fd9e 	bl	8000d9c <HAL_FLASH_Program>
 8000260:	4603      	mov	r3, r0
 8000262:	77fb      	strb	r3, [r7, #31]
        // Обработка ошибки записи (например, вывод в UART)
    }


    // Блокировка Flash
    HAL_FLASH_Lock();
 8000264:	f000 fe30 	bl	8000ec8 <HAL_FLASH_Lock>
}
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bdb0      	pop	{r4, r5, r7, pc}
 800026e:	bf00      	nop
 8000270:	08007c00 	.word	0x08007c00

08000274 <Read_From_Flash>:

void Read_From_Flash(uint32_t address, uint16_t* data) {
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
        *data = *(__IO uint16_t*)address;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b29a      	uxth	r2, r3
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	801a      	strh	r2, [r3, #0]
    }
 8000288:	bf00      	nop
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b092      	sub	sp, #72	@ 0x48
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb5d 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f881 	bl	80003a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f7ff ff5b 	bl	800015c <MX_GPIO_Init>
  MX_TIM1_Init();
 80002a6:	f000 f9af 	bl	8000608 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80002aa:	f000 fab1 	bl	8000810 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buffer, 1);
 80002ae:	2201      	movs	r2, #1
 80002b0:	4934      	ldr	r1, [pc, #208]	@ (8000384 <main+0xf0>)
 80002b2:	4835      	ldr	r0, [pc, #212]	@ (8000388 <main+0xf4>)
 80002b4:	f002 fc7c 	bl	8002bb0 <HAL_UART_Receive_IT>
  uint32_t address = FLASH_USER_START_ADDR; // Адрес страницы 30
 80002b8:	4b34      	ldr	r3, [pc, #208]	@ (800038c <main+0xf8>)
 80002ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t data = 0xACAB; // Данные для записи (16 бит)
 80002bc:	f64a 43ab 	movw	r3, #44203	@ 0xacab
 80002c0:	643b      	str	r3, [r7, #64]	@ 0x40

  Flash_Write_HalfWord(address, data);
 80002c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80002ca:	f7ff ff9f 	bl	800020c <Flash_Write_HalfWord>

  uint16_t flash_data;
  uint16_t user_value;
  char message[50];

  Read_From_Flash(FLASH_USER_START_ADDR, &flash_data); // чтение данных ячейки
 80002ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80002d2:	4619      	mov	r1, r3
 80002d4:	482d      	ldr	r0, [pc, #180]	@ (800038c <main+0xf8>)
 80002d6:	f7ff ffcd 	bl	8000274 <Read_From_Flash>

  const char* prompt = "Enter the val from Flash (hex, 4 symbols):\r\n";
 80002da:	4b2d      	ldr	r3, [pc, #180]	@ (8000390 <main+0xfc>)
 80002dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY); // отправка приглащения
 80002de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80002e0:	f7ff ff34 	bl	800014c <strlen>
 80002e4:	4603      	mov	r3, r0
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80002ee:	4826      	ldr	r0, [pc, #152]	@ (8000388 <main+0xf4>)
 80002f0:	f002 fbd3 	bl	8002a9a <HAL_UART_Transmit>
             UART_Receive_Callback(byte);
             HAL_UART_Transmit(&huart1, &byte, 1, 100); // Эхо-вывод
         }
  }
*/
   HAL_UART_Receive_IT(&huart1, uart_rx_buffer, 1);
 80002f4:	2201      	movs	r2, #1
 80002f6:	4923      	ldr	r1, [pc, #140]	@ (8000384 <main+0xf0>)
 80002f8:	4823      	ldr	r0, [pc, #140]	@ (8000388 <main+0xf4>)
 80002fa:	f002 fc59 	bl	8002bb0 <HAL_UART_Receive_IT>

   uint16_t flash_value;
   Read_From_Flash(FLASH_USER_START_ADDR, &flash_value);
 80002fe:	1cbb      	adds	r3, r7, #2
 8000300:	4619      	mov	r1, r3
 8000302:	4822      	ldr	r0, [pc, #136]	@ (800038c <main+0xf8>)
 8000304:	f7ff ffb6 	bl	8000274 <Read_From_Flash>

   while (1) {
          if (uart_rx_ready) {
 8000308:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <main+0x100>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0fa      	beq.n	8000308 <main+0x74>
              uart_rx_buffer[5] = '\0'; // Null-terminate the string
 8000312:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <main+0xf0>)
 8000314:	2200      	movs	r2, #0
 8000316:	715a      	strb	r2, [r3, #5]
              user_value = (uint16_t)strtoul((char*)uart_rx_buffer, NULL, 16);
 8000318:	2210      	movs	r2, #16
 800031a:	2100      	movs	r1, #0
 800031c:	4819      	ldr	r0, [pc, #100]	@ (8000384 <main+0xf0>)
 800031e:	f003 fa45 	bl	80037ac <strtoul>
 8000322:	4603      	mov	r3, r0
 8000324:	877b      	strh	r3, [r7, #58]	@ 0x3a

              if (user_value == flash_data) {
 8000326:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000328:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800032a:	429a      	cmp	r2, r3
 800032c:	d107      	bne.n	800033e <main+0xaa>
                  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nGood pass!\r\n", 15, HAL_MAX_DELAY);
 800032e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000332:	220f      	movs	r2, #15
 8000334:	4918      	ldr	r1, [pc, #96]	@ (8000398 <main+0x104>)
 8000336:	4814      	ldr	r0, [pc, #80]	@ (8000388 <main+0xf4>)
 8000338:	f002 fbaf 	bl	8002a9a <HAL_UART_Transmit>
 800033c:	e006      	b.n	800034c <main+0xb8>
              } else {
                  HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nBadPass!\r\n", 14, HAL_MAX_DELAY);
 800033e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000342:	220e      	movs	r2, #14
 8000344:	4915      	ldr	r1, [pc, #84]	@ (800039c <main+0x108>)
 8000346:	4810      	ldr	r0, [pc, #64]	@ (8000388 <main+0xf4>)
 8000348:	f002 fba7 	bl	8002a9a <HAL_UART_Transmit>
              }

              memset(uart_rx_buffer, 0, 5);
 800034c:	2205      	movs	r2, #5
 800034e:	2100      	movs	r1, #0
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <main+0xf0>)
 8000352:	f003 fa35 	bl	80037c0 <memset>
              uart_rx_index = 0;
 8000356:	4b12      	ldr	r3, [pc, #72]	@ (80003a0 <main+0x10c>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
              uart_rx_ready = 0;
 800035c:	4b0d      	ldr	r3, [pc, #52]	@ (8000394 <main+0x100>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
              HAL_UART_Transmit(&huart1, (uint8_t*)prompt, strlen(prompt), HAL_MAX_DELAY);
 8000362:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000364:	f7ff fef2 	bl	800014c <strlen>
 8000368:	4603      	mov	r3, r0
 800036a:	b29a      	uxth	r2, r3
 800036c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000370:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <main+0xf4>)
 8000374:	f002 fb91 	bl	8002a9a <HAL_UART_Transmit>
              HAL_UART_Receive_IT(&huart1, uart_rx_buffer, 1); // Restart прием
 8000378:	2201      	movs	r2, #1
 800037a:	4902      	ldr	r1, [pc, #8]	@ (8000384 <main+0xf0>)
 800037c:	4802      	ldr	r0, [pc, #8]	@ (8000388 <main+0xf4>)
 800037e:	f002 fc17 	bl	8002bb0 <HAL_UART_Receive_IT>
          if (uart_rx_ready) {
 8000382:	e7c1      	b.n	8000308 <main+0x74>
 8000384:	2000007c 	.word	0x2000007c
 8000388:	200000cc 	.word	0x200000cc
 800038c:	08007c00 	.word	0x08007c00
 8000390:	08003830 	.word	0x08003830
 8000394:	20000082 	.word	0x20000082
 8000398:	08003860 	.word	0x08003860
 800039c:	08003870 	.word	0x08003870
 80003a0:	20000081 	.word	0x20000081

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b090      	sub	sp, #64	@ 0x40
 80003a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2228      	movs	r2, #40	@ 0x28
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f003 fa04 	bl	80037c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d4:	2301      	movs	r3, #1
 80003d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d8:	2302      	movs	r3, #2
 80003da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e8:	f107 0318 	add.w	r3, r7, #24
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 f869 	bl	80014c4 <HAL_RCC_OscConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003f8:	f000 f87e 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fc:	230f      	movs	r3, #15
 80003fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000400:	2302      	movs	r3, #2
 8000402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2102      	movs	r1, #2
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fad6 	bl	80019c8 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000422:	f000 f869 	bl	80004f8 <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3740      	adds	r7, #64	@ 0x40
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a29      	ldr	r2, [pc, #164]	@ (80004e4 <HAL_UART_RxCpltCallback+0xb4>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d14b      	bne.n	80004da <HAL_UART_RxCpltCallback+0xaa>
        if(uart_rx_index < 4 && !uart_rx_ready) {
 8000442:	4b29      	ldr	r3, [pc, #164]	@ (80004e8 <HAL_UART_RxCpltCallback+0xb8>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	2b03      	cmp	r3, #3
 800044a:	d83b      	bhi.n	80004c4 <HAL_UART_RxCpltCallback+0x94>
 800044c:	4b27      	ldr	r3, [pc, #156]	@ (80004ec <HAL_UART_RxCpltCallback+0xbc>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b2db      	uxtb	r3, r3
 8000452:	2b00      	cmp	r3, #0
 8000454:	d136      	bne.n	80004c4 <HAL_UART_RxCpltCallback+0x94>
            char received = uart_rx_buffer[uart_rx_index];
 8000456:	4b24      	ldr	r3, [pc, #144]	@ (80004e8 <HAL_UART_RxCpltCallback+0xb8>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	461a      	mov	r2, r3
 800045e:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <HAL_UART_RxCpltCallback+0xc0>)
 8000460:	5c9b      	ldrb	r3, [r3, r2]
 8000462:	b2db      	uxtb	r3, r3
 8000464:	73fb      	strb	r3, [r7, #15]

            if(received >= '0' && received <= '9' ||
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	2b2f      	cmp	r3, #47	@ 0x2f
 800046a:	d902      	bls.n	8000472 <HAL_UART_RxCpltCallback+0x42>
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	2b39      	cmp	r3, #57	@ 0x39
 8000470:	d90b      	bls.n	800048a <HAL_UART_RxCpltCallback+0x5a>
               received >= 'A' && received <= 'F' ||
 8000472:	7bfb      	ldrb	r3, [r7, #15]
            if(received >= '0' && received <= '9' ||
 8000474:	2b40      	cmp	r3, #64	@ 0x40
 8000476:	d902      	bls.n	800047e <HAL_UART_RxCpltCallback+0x4e>
               received >= 'A' && received <= 'F' ||
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	2b46      	cmp	r3, #70	@ 0x46
 800047c:	d905      	bls.n	800048a <HAL_UART_RxCpltCallback+0x5a>
               received >= 'a' && received <= 'f') {
 800047e:	7bfb      	ldrb	r3, [r7, #15]
               received >= 'A' && received <= 'F' ||
 8000480:	2b60      	cmp	r3, #96	@ 0x60
 8000482:	d914      	bls.n	80004ae <HAL_UART_RxCpltCallback+0x7e>
               received >= 'a' && received <= 'f') {
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	2b66      	cmp	r3, #102	@ 0x66
 8000488:	d811      	bhi.n	80004ae <HAL_UART_RxCpltCallback+0x7e>
                uart_rx_buffer[uart_rx_index++] = received;
 800048a:	4b17      	ldr	r3, [pc, #92]	@ (80004e8 <HAL_UART_RxCpltCallback+0xb8>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	b2db      	uxtb	r3, r3
 8000490:	1c5a      	adds	r2, r3, #1
 8000492:	b2d1      	uxtb	r1, r2
 8000494:	4a14      	ldr	r2, [pc, #80]	@ (80004e8 <HAL_UART_RxCpltCallback+0xb8>)
 8000496:	7011      	strb	r1, [r2, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	7bf9      	ldrb	r1, [r7, #15]
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <HAL_UART_RxCpltCallback+0xc0>)
 800049e:	5499      	strb	r1, [r3, r2]
                HAL_UART_Transmit(&huart1, (uint8_t*)&received, 1, 10); // Эхо
 80004a0:	f107 010f 	add.w	r1, r7, #15
 80004a4:	230a      	movs	r3, #10
 80004a6:	2201      	movs	r2, #1
 80004a8:	4812      	ldr	r0, [pc, #72]	@ (80004f4 <HAL_UART_RxCpltCallback+0xc4>)
 80004aa:	f002 faf6 	bl	8002a9a <HAL_UART_Transmit>
            }

            if(uart_rx_index == 4) {
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <HAL_UART_RxCpltCallback+0xb8>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d105      	bne.n	80004c4 <HAL_UART_RxCpltCallback+0x94>
                uart_rx_buffer[4] = '\0';
 80004b8:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <HAL_UART_RxCpltCallback+0xc0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	711a      	strb	r2, [r3, #4]
                uart_rx_ready = 1;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <HAL_UART_RxCpltCallback+0xbc>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
            }
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80004c4:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <HAL_UART_RxCpltCallback+0xb8>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <HAL_UART_RxCpltCallback+0xc0>)
 80004ce:	4413      	add	r3, r2
 80004d0:	2201      	movs	r2, #1
 80004d2:	4619      	mov	r1, r3
 80004d4:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <HAL_UART_RxCpltCallback+0xc4>)
 80004d6:	f002 fb6b 	bl	8002bb0 <HAL_UART_Receive_IT>
    }
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40013800 	.word	0x40013800
 80004e8:	20000081 	.word	0x20000081
 80004ec:	20000082 	.word	0x20000082
 80004f0:	2000007c 	.word	0x2000007c
 80004f4:	200000cc 	.word	0x200000cc

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <HAL_MspInit+0x5c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <HAL_MspInit+0x5c>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_MspInit+0x60>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <HAL_MspInit+0x60>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <NMI_Handler+0x4>

08000570 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <MemManage_Handler+0x4>

08000580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <UsageFault_Handler+0x4>

08000590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 fa14 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005c4:	4802      	ldr	r0, [pc, #8]	@ (80005d0 <TIM1_UP_IRQHandler+0x10>)
 80005c6:	f001 fc34 	bl	8001e32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000084 	.word	0x20000084

080005d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <TIM1_CC_IRQHandler+0x10>)
 80005da:	f001 fc2a 	bl	8001e32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000084 	.word	0x20000084

080005e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <USART1_IRQHandler+0x10>)
 80005ee:	f002 fb05 	bl	8002bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000cc 	.word	0x200000cc

080005fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2220      	movs	r2, #32
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f003 f8bd 	bl	80037c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000646:	4b3f      	ldr	r3, [pc, #252]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000648:	4a3f      	ldr	r2, [pc, #252]	@ (8000748 <MX_TIM1_Init+0x140>)
 800064a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200;
 800064c:	4b3d      	ldr	r3, [pc, #244]	@ (8000744 <MX_TIM1_Init+0x13c>)
 800064e:	f44f 52e1 	mov.w	r2, #7200	@ 0x1c20
 8000652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b3b      	ldr	r3, [pc, #236]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800065a:	4b3a      	ldr	r3, [pc, #232]	@ (8000744 <MX_TIM1_Init+0x13c>)
 800065c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000668:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <MX_TIM1_Init+0x13c>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000674:	4833      	ldr	r0, [pc, #204]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000676:	f001 fb35 	bl	8001ce4 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000680:	f7ff ff3a 	bl	80004f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800068e:	4619      	mov	r1, r3
 8000690:	482c      	ldr	r0, [pc, #176]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000692:	f001 fd81 	bl	8002198 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800069c:	f7ff ff2c 	bl	80004f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a0:	4828      	ldr	r0, [pc, #160]	@ (8000744 <MX_TIM1_Init+0x13c>)
 80006a2:	f001 fb6e 	bl	8001d82 <HAL_TIM_PWM_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006ac:	f7ff ff24 	bl	80004f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006bc:	4619      	mov	r1, r3
 80006be:	4821      	ldr	r0, [pc, #132]	@ (8000744 <MX_TIM1_Init+0x13c>)
 80006c0:	f002 f8e0 	bl	8002884 <HAL_TIMEx_MasterConfigSynchronization>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80006ca:	f7ff ff15 	bl	80004f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ce:	2360      	movs	r3, #96	@ 0x60
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 25000;
 80006d2:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80006d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e4:	2300      	movs	r3, #0
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <MX_TIM1_Init+0x13c>)
 80006f6:	f001 fc8d 	bl	8002014 <HAL_TIM_PWM_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000700:	f7ff fefa 	bl	80004f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4807      	ldr	r0, [pc, #28]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000728:	f002 f904 	bl	8002934 <HAL_TIMEx_ConfigBreakDeadTime>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000732:	f7ff fee1 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000736:	4803      	ldr	r0, [pc, #12]	@ (8000744 <MX_TIM1_Init+0x13c>)
 8000738:	f000 f836 	bl	80007a8 <HAL_TIM_MspPostInit>

}
 800073c:	bf00      	nop
 800073e:	3758      	adds	r7, #88	@ 0x58
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000084 	.word	0x20000084
 8000748:	40012c00 	.word	0x40012c00

0800074c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a11      	ldr	r2, [pc, #68]	@ (80007a0 <HAL_TIM_Base_MspInit+0x54>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d11b      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <HAL_TIM_Base_MspInit+0x58>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <HAL_TIM_Base_MspInit+0x58>)
 8000764:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000768:	6193      	str	r3, [r2, #24]
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <HAL_TIM_Base_MspInit+0x58>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2019      	movs	r0, #25
 800077c:	f000 fa25 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000780:	2019      	movs	r0, #25
 8000782:	f000 fa3e 	bl	8000c02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	201b      	movs	r0, #27
 800078c:	f000 fa1d 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000790:	201b      	movs	r0, #27
 8000792:	f000 fa36 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012c00 	.word	0x40012c00
 80007a4:	40021000 	.word	0x40021000

080007a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <HAL_TIM_MspPostInit+0x5c>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d118      	bne.n	80007fa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <HAL_TIM_MspPostInit+0x60>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000808 <HAL_TIM_MspPostInit+0x60>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <HAL_TIM_MspPostInit+0x60>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <HAL_TIM_MspPostInit+0x64>)
 80007f6:	f000 fcd1 	bl	800119c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3720      	adds	r7, #32
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40012c00 	.word	0x40012c00
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800

08000810 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_USART1_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART1_UART_Init+0x4c>)
 8000848:	f002 f8d7 	bl	80029fa <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f7ff fe51 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000cc 	.word	0x200000cc
 8000860:	40013800 	.word	0x40013800

08000864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <HAL_UART_MspInit+0x9c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d139      	bne.n	80008f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1e      	ldr	r2, [pc, #120]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <HAL_UART_MspInit+0xa0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	480f      	ldr	r0, [pc, #60]	@ (8000908 <HAL_UART_MspInit+0xa4>)
 80008ca:	f000 fc67 	bl	800119c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	@ (8000908 <HAL_UART_MspInit+0xa4>)
 80008e4:	f000 fc5a 	bl	800119c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2025      	movs	r0, #37	@ 0x25
 80008ee:	f000 f96c 	bl	8000bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008f2:	2025      	movs	r0, #37	@ 0x25
 80008f4:	f000 f985 	bl	8000c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40013800 	.word	0x40013800
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800090c:	f7ff fe76 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480b      	ldr	r0, [pc, #44]	@ (8000940 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000912:	490c      	ldr	r1, [pc, #48]	@ (8000944 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000914:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a09      	ldr	r2, [pc, #36]	@ (800094c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000928:	4c09      	ldr	r4, [pc, #36]	@ (8000950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f002 ff4b 	bl	80037d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fcab 	bl	8000294 <main>
  bx lr
 800093e:	4770      	bx	lr
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000948:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 800094c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000950:	20000270 	.word	0x20000270

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_Init+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_Init+0x28>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f923 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fdc6 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f93b 	bl	8000c1e <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c0:	f000 f903 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	@ (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <HAL_IncTick+0x20>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000114 	.word	0x20000114

08000a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	@ (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	20000114 	.word	0x20000114

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	@ (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4906      	ldr	r1, [pc, #24]	@ (8000ab4 <__NVIC_EnableIRQ+0x34>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	@ (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	@ 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	@ 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b94:	f7ff ff90 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff2d 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff42 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5f 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff35 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ffa2 	bl	8000b70 <SysTick_Config>
 8000c2c:	4603      	mov	r3, r0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d008      	beq.n	8000c60 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2204      	movs	r2, #4
 8000c52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e020      	b.n	8000ca2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 020e 	bic.w	r2, r2, #14
 8000c6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0201 	bic.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d005      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e051      	b.n	8000d74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f022 020e 	bic.w	r2, r2, #14
 8000cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a22      	ldr	r2, [pc, #136]	@ (8000d80 <HAL_DMA_Abort_IT+0xd4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d029      	beq.n	8000d4e <HAL_DMA_Abort_IT+0xa2>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <HAL_DMA_Abort_IT+0xd8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d022      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x9e>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1f      	ldr	r2, [pc, #124]	@ (8000d88 <HAL_DMA_Abort_IT+0xdc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01a      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x98>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1e      	ldr	r2, [pc, #120]	@ (8000d8c <HAL_DMA_Abort_IT+0xe0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d012      	beq.n	8000d3e <HAL_DMA_Abort_IT+0x92>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d90 <HAL_DMA_Abort_IT+0xe4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00a      	beq.n	8000d38 <HAL_DMA_Abort_IT+0x8c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <HAL_DMA_Abort_IT+0xe8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d102      	bne.n	8000d32 <HAL_DMA_Abort_IT+0x86>
 8000d2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d30:	e00e      	b.n	8000d50 <HAL_DMA_Abort_IT+0xa4>
 8000d32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d36:	e00b      	b.n	8000d50 <HAL_DMA_Abort_IT+0xa4>
 8000d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3c:	e008      	b.n	8000d50 <HAL_DMA_Abort_IT+0xa4>
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	e005      	b.n	8000d50 <HAL_DMA_Abort_IT+0xa4>
 8000d44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d48:	e002      	b.n	8000d50 <HAL_DMA_Abort_IT+0xa4>
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	e000      	b.n	8000d50 <HAL_DMA_Abort_IT+0xa4>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	4a11      	ldr	r2, [pc, #68]	@ (8000d98 <HAL_DMA_Abort_IT+0xec>)
 8000d52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	4798      	blx	r3
    } 
  }
  return status;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020008 	.word	0x40020008
 8000d84:	4002001c 	.word	0x4002001c
 8000d88:	40020030 	.word	0x40020030
 8000d8c:	40020044 	.word	0x40020044
 8000d90:	40020058 	.word	0x40020058
 8000d94:	4002006c 	.word	0x4002006c
 8000d98:	40020000 	.word	0x40020000

08000d9c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000db6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <HAL_FLASH_Program+0xd8>)
 8000db8:	7e1b      	ldrb	r3, [r3, #24]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d101      	bne.n	8000dc2 <HAL_FLASH_Program+0x26>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e054      	b.n	8000e6c <HAL_FLASH_Program+0xd0>
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e74 <HAL_FLASH_Program+0xd8>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000dc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000dcc:	f000 f8a8 	bl	8000f20 <FLASH_WaitForLastOperation>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d144      	bne.n	8000e64 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d102      	bne.n	8000de6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000de0:	2301      	movs	r3, #1
 8000de2:	757b      	strb	r3, [r7, #21]
 8000de4:	e007      	b.n	8000df6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d102      	bne.n	8000df2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000dec:	2302      	movs	r3, #2
 8000dee:	757b      	strb	r3, [r7, #21]
 8000df0:	e001      	b.n	8000df6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000df2:	2304      	movs	r3, #4
 8000df4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	75bb      	strb	r3, [r7, #22]
 8000dfa:	e02d      	b.n	8000e58 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	005a      	lsls	r2, r3, #1
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	eb02 0c03 	add.w	ip, r2, r3
 8000e06:	7dbb      	ldrb	r3, [r7, #22]
 8000e08:	0119      	lsls	r1, r3, #4
 8000e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e0e:	f1c1 0620 	rsb	r6, r1, #32
 8000e12:	f1a1 0020 	sub.w	r0, r1, #32
 8000e16:	fa22 f401 	lsr.w	r4, r2, r1
 8000e1a:	fa03 f606 	lsl.w	r6, r3, r6
 8000e1e:	4334      	orrs	r4, r6
 8000e20:	fa23 f000 	lsr.w	r0, r3, r0
 8000e24:	4304      	orrs	r4, r0
 8000e26:	fa23 f501 	lsr.w	r5, r3, r1
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4660      	mov	r0, ip
 8000e30:	f000 f85a 	bl	8000ee8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000e38:	f000 f872 	bl	8000f20 <FLASH_WaitForLastOperation>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <HAL_FLASH_Program+0xdc>)
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <HAL_FLASH_Program+0xdc>)
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000e4c:	7dfb      	ldrb	r3, [r7, #23]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d107      	bne.n	8000e62 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000e52:	7dbb      	ldrb	r3, [r7, #22]
 8000e54:	3301      	adds	r3, #1
 8000e56:	75bb      	strb	r3, [r7, #22]
 8000e58:	7dba      	ldrb	r2, [r7, #22]
 8000e5a:	7d7b      	ldrb	r3, [r7, #21]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d3cd      	bcc.n	8000dfc <HAL_FLASH_Program+0x60>
 8000e60:	e000      	b.n	8000e64 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000e62:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_FLASH_Program+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]

  return status;
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	20000118 	.word	0x20000118
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e86:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HAL_FLASH_Unlock+0x40>)
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00d      	beq.n	8000eae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_FLASH_Unlock+0x40>)
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_FLASH_Unlock+0x44>)
 8000e96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_FLASH_Unlock+0x40>)
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_FLASH_Unlock+0x48>)
 8000e9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_FLASH_Unlock+0x40>)
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	45670123 	.word	0x45670123
 8000ec4:	cdef89ab 	.word	0xcdef89ab

08000ec8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_FLASH_Lock+0x1c>)
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_FLASH_Lock+0x1c>)
 8000ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bc80      	pop	{r7}
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <FLASH_Program_HalfWord+0x30>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <FLASH_Program_HalfWord+0x34>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <FLASH_Program_HalfWord+0x34>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	887a      	ldrh	r2, [r7, #2]
 8000f0a:	801a      	strh	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000118 	.word	0x20000118
 8000f1c:	40022000 	.word	0x40022000

08000f20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff fd6e 	bl	8000a08 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f2e:	e010      	b.n	8000f52 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f36:	d00c      	beq.n	8000f52 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <FLASH_WaitForLastOperation+0x2e>
 8000f3e:	f7ff fd63 	bl	8000a08 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d201      	bcs.n	8000f52 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e025      	b.n	8000f9e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <FLASH_WaitForLastOperation+0x88>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1e8      	bne.n	8000f30 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f5e:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <FLASH_WaitForLastOperation+0x88>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <FLASH_WaitForLastOperation+0x88>)
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f70:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <FLASH_WaitForLastOperation+0x88>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <FLASH_WaitForLastOperation+0x88>)
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d105      	bne.n	8000f94 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f88:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <FLASH_WaitForLastOperation+0x88>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f94:	f000 f80a 	bl	8000fac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40022000 	.word	0x40022000

08000fac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d009      	beq.n	8000fd6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <FLASH_SetErrorCode+0x9c>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <FLASH_SetErrorCode+0x9c>)
 8000fcc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f043 0310 	orr.w	r3, r3, #16
 8000fd4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d009      	beq.n	8000ff6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <FLASH_SetErrorCode+0x9c>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <FLASH_SetErrorCode+0x9c>)
 8000fec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <FLASH_SetErrorCode+0x9c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	4a0f      	ldr	r2, [pc, #60]	@ (8001048 <FLASH_SetErrorCode+0x9c>)
 800100c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f240 1201 	movw	r2, #257	@ 0x101
 8001020:	4293      	cmp	r3, r2
 8001022:	d106      	bne.n	8001032 <FLASH_SetErrorCode+0x86>
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8001026:	69db      	ldr	r3, [r3, #28]
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	61d3      	str	r3, [r2, #28]
}  
 8001030:	e002      	b.n	8001038 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001032:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <FLASH_SetErrorCode+0x98>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	60d3      	str	r3, [r2, #12]
}  
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40022000 	.word	0x40022000
 8001048:	20000118 	.word	0x20000118

0800104c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <HAL_FLASHEx_Erase+0xd0>)
 8001060:	7e1b      	ldrb	r3, [r3, #24]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_FLASHEx_Erase+0x1e>
 8001066:	2302      	movs	r3, #2
 8001068:	e053      	b.n	8001112 <HAL_FLASHEx_Erase+0xc6>
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <HAL_FLASHEx_Erase+0xd0>)
 800106c:	2201      	movs	r2, #1
 800106e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d116      	bne.n	80010a6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001078:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800107c:	f7ff ff50 	bl	8000f20 <FLASH_WaitForLastOperation>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d141      	bne.n	800110a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001086:	2001      	movs	r0, #1
 8001088:	f000 f84c 	bl	8001124 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800108c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001090:	f7ff ff46 	bl	8000f20 <FLASH_WaitForLastOperation>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001098:	4b21      	ldr	r3, [pc, #132]	@ (8001120 <HAL_FLASHEx_Erase+0xd4>)
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	4a20      	ldr	r2, [pc, #128]	@ (8001120 <HAL_FLASHEx_Erase+0xd4>)
 800109e:	f023 0304 	bic.w	r3, r3, #4
 80010a2:	6113      	str	r3, [r2, #16]
 80010a4:	e031      	b.n	800110a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80010a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010aa:	f7ff ff39 	bl	8000f20 <FLASH_WaitForLastOperation>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12a      	bne.n	800110a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010ba:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	e019      	b.n	80010f8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80010c4:	68b8      	ldr	r0, [r7, #8]
 80010c6:	f000 f849 	bl	800115c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80010ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80010ce:	f7ff ff27 	bl	8000f20 <FLASH_WaitForLastOperation>
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <HAL_FLASHEx_Erase+0xd4>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <HAL_FLASHEx_Erase+0xd4>)
 80010dc:	f023 0302 	bic.w	r3, r3, #2
 80010e0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	601a      	str	r2, [r3, #0]
            break;
 80010ee:	e00c      	b.n	800110a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80010f6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	029a      	lsls	r2, r3, #10
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4413      	add	r3, r2
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	429a      	cmp	r2, r3
 8001108:	d3dc      	bcc.n	80010c4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800110a:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HAL_FLASHEx_Erase+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	761a      	strb	r2, [r3, #24]

  return status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000118 	.word	0x20000118
 8001120:	40022000 	.word	0x40022000

08001124 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <FLASH_MassErase+0x30>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <FLASH_MassErase+0x34>)
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <FLASH_MassErase+0x34>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <FLASH_MassErase+0x34>)
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <FLASH_MassErase+0x34>)
 8001144:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001148:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	20000118 	.word	0x20000118
 8001158:	40022000 	.word	0x40022000

0800115c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <FLASH_PageErase+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <FLASH_PageErase+0x3c>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <FLASH_PageErase+0x3c>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <FLASH_PageErase+0x3c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <FLASH_PageErase+0x3c>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <FLASH_PageErase+0x3c>)
 8001182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001186:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000118 	.word	0x20000118
 8001198:	40022000 	.word	0x40022000

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b08b      	sub	sp, #44	@ 0x2c
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	e161      	b.n	8001474 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011b0:	2201      	movs	r2, #1
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8150 	bne.w	800146e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4a97      	ldr	r2, [pc, #604]	@ (8001430 <HAL_GPIO_Init+0x294>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d05e      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011d8:	4a95      	ldr	r2, [pc, #596]	@ (8001430 <HAL_GPIO_Init+0x294>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d875      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011de:	4a95      	ldr	r2, [pc, #596]	@ (8001434 <HAL_GPIO_Init+0x298>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d058      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011e4:	4a93      	ldr	r2, [pc, #588]	@ (8001434 <HAL_GPIO_Init+0x298>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d86f      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011ea:	4a93      	ldr	r2, [pc, #588]	@ (8001438 <HAL_GPIO_Init+0x29c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d052      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011f0:	4a91      	ldr	r2, [pc, #580]	@ (8001438 <HAL_GPIO_Init+0x29c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d869      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 80011f6:	4a91      	ldr	r2, [pc, #580]	@ (800143c <HAL_GPIO_Init+0x2a0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d04c      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 80011fc:	4a8f      	ldr	r2, [pc, #572]	@ (800143c <HAL_GPIO_Init+0x2a0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d863      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 8001202:	4a8f      	ldr	r2, [pc, #572]	@ (8001440 <HAL_GPIO_Init+0x2a4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d046      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
 8001208:	4a8d      	ldr	r2, [pc, #564]	@ (8001440 <HAL_GPIO_Init+0x2a4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d85d      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d82a      	bhi.n	8001268 <HAL_GPIO_Init+0xcc>
 8001212:	2b12      	cmp	r3, #18
 8001214:	d859      	bhi.n	80012ca <HAL_GPIO_Init+0x12e>
 8001216:	a201      	add	r2, pc, #4	@ (adr r2, 800121c <HAL_GPIO_Init+0x80>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001297 	.word	0x08001297
 8001220:	08001271 	.word	0x08001271
 8001224:	08001283 	.word	0x08001283
 8001228:	080012c5 	.word	0x080012c5
 800122c:	080012cb 	.word	0x080012cb
 8001230:	080012cb 	.word	0x080012cb
 8001234:	080012cb 	.word	0x080012cb
 8001238:	080012cb 	.word	0x080012cb
 800123c:	080012cb 	.word	0x080012cb
 8001240:	080012cb 	.word	0x080012cb
 8001244:	080012cb 	.word	0x080012cb
 8001248:	080012cb 	.word	0x080012cb
 800124c:	080012cb 	.word	0x080012cb
 8001250:	080012cb 	.word	0x080012cb
 8001254:	080012cb 	.word	0x080012cb
 8001258:	080012cb 	.word	0x080012cb
 800125c:	080012cb 	.word	0x080012cb
 8001260:	08001279 	.word	0x08001279
 8001264:	0800128d 	.word	0x0800128d
 8001268:	4a76      	ldr	r2, [pc, #472]	@ (8001444 <HAL_GPIO_Init+0x2a8>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d013      	beq.n	8001296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800126e:	e02c      	b.n	80012ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	623b      	str	r3, [r7, #32]
          break;
 8001276:	e029      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	3304      	adds	r3, #4
 800127e:	623b      	str	r3, [r7, #32]
          break;
 8001280:	e024      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	3308      	adds	r3, #8
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e01f      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	330c      	adds	r3, #12
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e01a      	b.n	80012cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d102      	bne.n	80012a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129e:	2304      	movs	r3, #4
 80012a0:	623b      	str	r3, [r7, #32]
          break;
 80012a2:	e013      	b.n	80012cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ac:	2308      	movs	r3, #8
 80012ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	611a      	str	r2, [r3, #16]
          break;
 80012b6:	e009      	b.n	80012cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b8:	2308      	movs	r3, #8
 80012ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	615a      	str	r2, [r3, #20]
          break;
 80012c2:	e003      	b.n	80012cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
          break;
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x130>
          break;
 80012ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2bff      	cmp	r3, #255	@ 0xff
 80012d0:	d801      	bhi.n	80012d6 <HAL_GPIO_Init+0x13a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e001      	b.n	80012da <HAL_GPIO_Init+0x13e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	@ 0xff
 80012e0:	d802      	bhi.n	80012e8 <HAL_GPIO_Init+0x14c>
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	e002      	b.n	80012ee <HAL_GPIO_Init+0x152>
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	3b08      	subs	r3, #8
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	210f      	movs	r1, #15
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	6a39      	ldr	r1, [r7, #32]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80a9 	beq.w	800146e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800131c:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <HAL_GPIO_Init+0x2ac>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a49      	ldr	r2, [pc, #292]	@ (8001448 <HAL_GPIO_Init+0x2ac>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <HAL_GPIO_Init+0x2ac>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001334:	4a45      	ldr	r2, [pc, #276]	@ (800144c <HAL_GPIO_Init+0x2b0>)
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3d      	ldr	r2, [pc, #244]	@ (8001450 <HAL_GPIO_Init+0x2b4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1e0>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3c      	ldr	r2, [pc, #240]	@ (8001454 <HAL_GPIO_Init+0x2b8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1dc>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a3b      	ldr	r2, [pc, #236]	@ (8001458 <HAL_GPIO_Init+0x2bc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1d8>
 8001370:	2302      	movs	r3, #2
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 8001374:	2303      	movs	r3, #3
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1e2>
 800137c:	2300      	movs	r3, #0
 800137e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138e:	492f      	ldr	r1, [pc, #188]	@ (800144c <HAL_GPIO_Init+0x2b0>)
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	492b      	ldr	r1, [pc, #172]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013b6:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	4927      	ldr	r1, [pc, #156]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013d0:	4b22      	ldr	r3, [pc, #136]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	4921      	ldr	r1, [pc, #132]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60cb      	str	r3, [r1, #12]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013de:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	491d      	ldr	r1, [pc, #116]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	4917      	ldr	r1, [pc, #92]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	43db      	mvns	r3, r3
 800140e:	4913      	ldr	r1, [pc, #76]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 8001410:	4013      	ands	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d01f      	beq.n	8001460 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001420:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	490d      	ldr	r1, [pc, #52]	@ (800145c <HAL_GPIO_Init+0x2c0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e01f      	b.n	800146e <HAL_GPIO_Init+0x2d2>
 800142e:	bf00      	nop
 8001430:	10320000 	.word	0x10320000
 8001434:	10310000 	.word	0x10310000
 8001438:	10220000 	.word	0x10220000
 800143c:	10210000 	.word	0x10210000
 8001440:	10120000 	.word	0x10120000
 8001444:	10110000 	.word	0x10110000
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010c00 	.word	0x40010c00
 8001458:	40011000 	.word	0x40011000
 800145c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001460:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_GPIO_Init+0x2f4>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	43db      	mvns	r3, r3
 8001468:	4909      	ldr	r1, [pc, #36]	@ (8001490 <HAL_GPIO_Init+0x2f4>)
 800146a:	4013      	ands	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001470:	3301      	adds	r3, #1
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f47f ae96 	bne.w	80011b0 <HAL_GPIO_Init+0x14>
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	372c      	adds	r7, #44	@ 0x2c
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e272      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8087 	beq.w	80015f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e4:	4b92      	ldr	r3, [pc, #584]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d00c      	beq.n	800150a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d112      	bne.n	8001522 <HAL_RCC_OscConfig+0x5e>
 80014fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001508:	d10b      	bne.n	8001522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150a:	4b89      	ldr	r3, [pc, #548]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d06c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x12c>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d168      	bne.n	80015f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e24c      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x76>
 800152c:	4b80      	ldr	r3, [pc, #512]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a7f      	ldr	r2, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e02e      	b.n	8001598 <HAL_RCC_OscConfig+0xd4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x98>
 8001542:	4b7b      	ldr	r3, [pc, #492]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7a      	ldr	r2, [pc, #488]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b78      	ldr	r3, [pc, #480]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a77      	ldr	r2, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e01d      	b.n	8001598 <HAL_RCC_OscConfig+0xd4>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0xbc>
 8001566:	4b72      	ldr	r3, [pc, #456]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a71      	ldr	r2, [pc, #452]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b6f      	ldr	r3, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6e      	ldr	r2, [pc, #440]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0xd4>
 8001580:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a6a      	ldr	r2, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a67      	ldr	r2, [pc, #412]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001592:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d013      	beq.n	80015c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa32 	bl	8000a08 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fa2e 	bl	8000a08 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	@ 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e200      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe4>
 80015c6:	e014      	b.n	80015f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fa1e 	bl	8000a08 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fa1a 	bl	8000a08 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	@ 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1ec      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e2:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x10c>
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d063      	beq.n	80016c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800160a:	4b49      	ldr	r3, [pc, #292]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b08      	cmp	r3, #8
 8001614:	d11c      	bne.n	8001650 <HAL_RCC_OscConfig+0x18c>
 8001616:	4b46      	ldr	r3, [pc, #280]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d116      	bne.n	8001650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	4b43      	ldr	r3, [pc, #268]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x176>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e1c0      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163a:	4b3d      	ldr	r3, [pc, #244]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4939      	ldr	r1, [pc, #228]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	e03a      	b.n	80016c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d020      	beq.n	800169a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001658:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165e:	f7ff f9d3 	bl	8000a08 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001666:	f7ff f9cf 	bl	8000a08 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1a1      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4927      	ldr	r1, [pc, #156]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 8001694:	4313      	orrs	r3, r2
 8001696:	600b      	str	r3, [r1, #0]
 8001698:	e015      	b.n	80016c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x270>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f9b2 	bl	8000a08 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff f9ae 	bl	8000a08 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e180      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03a      	beq.n	8001748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016da:	4b17      	ldr	r3, [pc, #92]	@ (8001738 <HAL_RCC_OscConfig+0x274>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff f992 	bl	8000a08 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff f98e 	bl	8000a08 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e160      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001706:	2001      	movs	r0, #1
 8001708:	f000 face 	bl	8001ca8 <RCC_Delay>
 800170c:	e01c      	b.n	8001748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_RCC_OscConfig+0x274>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff f978 	bl	8000a08 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171a:	e00f      	b.n	800173c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171c:	f7ff f974 	bl	8000a08 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d908      	bls.n	800173c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e146      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	42420000 	.word	0x42420000
 8001738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173c:	4b92      	ldr	r3, [pc, #584]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e9      	bne.n	800171c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80a6 	beq.w	80018a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175a:	4b8b      	ldr	r3, [pc, #556]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d10d      	bne.n	8001782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4a87      	ldr	r2, [pc, #540]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	61d3      	str	r3, [r2, #28]
 8001772:	4b85      	ldr	r3, [pc, #532]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800177e:	2301      	movs	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	4b82      	ldr	r3, [pc, #520]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d118      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800178e:	4b7f      	ldr	r3, [pc, #508]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a7e      	ldr	r2, [pc, #504]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800179a:	f7ff f935 	bl	8000a08 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a2:	f7ff f931 	bl	8000a08 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	@ 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e103      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	4b75      	ldr	r3, [pc, #468]	@ (800198c <HAL_RCC_OscConfig+0x4c8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x312>
 80017c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6213      	str	r3, [r2, #32]
 80017d4:	e02d      	b.n	8001832 <HAL_RCC_OscConfig+0x36e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x334>
 80017de:	4b6a      	ldr	r3, [pc, #424]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4a69      	ldr	r2, [pc, #420]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6213      	str	r3, [r2, #32]
 80017ea:	4b67      	ldr	r3, [pc, #412]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	4a66      	ldr	r2, [pc, #408]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 0304 	bic.w	r3, r3, #4
 80017f4:	6213      	str	r3, [r2, #32]
 80017f6:	e01c      	b.n	8001832 <HAL_RCC_OscConfig+0x36e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d10c      	bne.n	800181a <HAL_RCC_OscConfig+0x356>
 8001800:	4b61      	ldr	r3, [pc, #388]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a60      	ldr	r2, [pc, #384]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	4b5e      	ldr	r3, [pc, #376]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a5d      	ldr	r2, [pc, #372]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e00b      	b.n	8001832 <HAL_RCC_OscConfig+0x36e>
 800181a:	4b5b      	ldr	r3, [pc, #364]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a5a      	ldr	r2, [pc, #360]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4b58      	ldr	r3, [pc, #352]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a57      	ldr	r2, [pc, #348]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d015      	beq.n	8001866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff f8e5 	bl	8000a08 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff f8e1 	bl	8000a08 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0b1      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001858:	4b4b      	ldr	r3, [pc, #300]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0ee      	beq.n	8001842 <HAL_RCC_OscConfig+0x37e>
 8001864:	e014      	b.n	8001890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff f8cf 	bl	8000a08 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff f8cb 	bl	8000a08 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e09b      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001884:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ee      	bne.n	800186e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d105      	bne.n	80018a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001896:	4b3c      	ldr	r3, [pc, #240]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a3b      	ldr	r2, [pc, #236]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ac:	4b36      	ldr	r3, [pc, #216]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d061      	beq.n	800197c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d146      	bne.n	800194e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c0:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f89f 	bl	8000a08 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f89b 	bl	8000a08 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e06d      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e0:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f4:	d108      	bne.n	8001908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018f6:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4921      	ldr	r1, [pc, #132]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a19      	ldr	r1, [r3, #32]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001918:	430b      	orrs	r3, r1
 800191a:	491b      	ldr	r1, [pc, #108]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff f86f 	bl	8000a08 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff f86b 	bl	8000a08 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e03d      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x46a>
 800194c:	e035      	b.n	80019ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <HAL_RCC_OscConfig+0x4cc>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff f858 	bl	8000a08 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff f854 	bl	8000a08 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e026      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x498>
 800197a:	e01e      	b.n	80019ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e019      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_OscConfig+0x500>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0d0      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d910      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b67      	ldr	r3, [pc, #412]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 0207 	bic.w	r2, r3, #7
 80019f2:	4965      	ldr	r1, [pc, #404]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4a58      	ldr	r2, [pc, #352]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a52      	ldr	r2, [pc, #328]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d040      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b41      	ldr	r3, [pc, #260]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e073      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b3d      	ldr	r3, [pc, #244]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e06b      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b39      	ldr	r3, [pc, #228]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4936      	ldr	r1, [pc, #216]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ffa6 	bl	8000a08 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7fe ffa2 	bl	8000a08 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e053      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d210      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 0207 	bic.w	r2, r3, #7
 8001afe:	4922      	ldr	r1, [pc, #136]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f821 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <HAL_RCC_ClockConfig+0x1cc>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_ClockConfig+0x1d0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe ff04 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08003880 	.word	0x08003880
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d002      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x30>
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001bca:	e027      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bcc:	4b19      	ldr	r3, [pc, #100]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bce:	613b      	str	r3, [r7, #16]
      break;
 8001bd0:	e027      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d010      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0c5b      	lsrs	r3, r3, #17
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	4a11      	ldr	r2, [pc, #68]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bfe:	fb03 f202 	mul.w	r2, r3, r2
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e004      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	613b      	str	r3, [r7, #16]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1e:	613b      	str	r3, [r7, #16]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	693b      	ldr	r3, [r7, #16]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	371c      	adds	r7, #28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	007a1200 	.word	0x007a1200
 8001c38:	08003898 	.word	0x08003898
 8001c3c:	080038a8 	.word	0x080038a8
 8001c40:	003d0900 	.word	0x003d0900

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b02      	ldr	r3, [pc, #8]	@ (8001c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff2 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4903      	ldr	r1, [pc, #12]	@ (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6e:	5ccb      	ldrb	r3, [r1, r3]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08003890 	.word	0x08003890

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0adb      	lsrs	r3, r3, #11
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4903      	ldr	r1, [pc, #12]	@ (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08003890 	.word	0x08003890

08001ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <RCC_Delay+0x34>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <RCC_Delay+0x38>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a5b      	lsrs	r3, r3, #9
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cc4:	bf00      	nop
  }
  while (Delay --);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f9      	bne.n	8001cc4 <RCC_Delay+0x1c>
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	10624dd3 	.word	0x10624dd3

08001ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e041      	b.n	8001d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fd1e 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f000 fb2c 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e041      	b.n	8001e18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d106      	bne.n	8001dae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f839 	bl	8001e20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f000 fadd 	bl	8002380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d01b      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f06f 0202 	mvn.w	r2, #2
 8001e66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fa64 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001e82:	e005      	b.n	8001e90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa57 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fa66 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01b      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f06f 0204 	mvn.w	r2, #4
 8001eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 fa3e 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001ece:	e005      	b.n	8001edc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fa31 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa40 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01b      	beq.n	8001f2e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f06f 0208 	mvn.w	r2, #8
 8001efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2204      	movs	r2, #4
 8001f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fa18 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001f1a:	e005      	b.n	8001f28 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fa0b 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa1a 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01b      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0210 	mvn.w	r2, #16
 8001f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f9f2 	bl	800234a <HAL_TIM_IC_CaptureCallback>
 8001f66:	e005      	b.n	8001f74 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f9e5 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f9f4 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f06f 0201 	mvn.w	r2, #1
 8001f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f9c4 	bl	8002326 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00c      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fd13 	bl	80029e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9c4 	bl	800236e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00c      	beq.n	800200a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d007      	beq.n	800200a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f06f 0220 	mvn.w	r2, #32
 8002002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fce6 	bl	80029d6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800202e:	2302      	movs	r3, #2
 8002030:	e0ae      	b.n	8002190 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0c      	cmp	r3, #12
 800203e:	f200 809f 	bhi.w	8002180 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002042:	a201      	add	r2, pc, #4	@ (adr r2, 8002048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	0800207d 	.word	0x0800207d
 800204c:	08002181 	.word	0x08002181
 8002050:	08002181 	.word	0x08002181
 8002054:	08002181 	.word	0x08002181
 8002058:	080020bd 	.word	0x080020bd
 800205c:	08002181 	.word	0x08002181
 8002060:	08002181 	.word	0x08002181
 8002064:	08002181 	.word	0x08002181
 8002068:	080020ff 	.word	0x080020ff
 800206c:	08002181 	.word	0x08002181
 8002070:	08002181 	.word	0x08002181
 8002074:	08002181 	.word	0x08002181
 8002078:	0800213f 	.word	0x0800213f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f9e0 	bl	8002448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0208 	orr.w	r2, r2, #8
 8002096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0204 	bic.w	r2, r2, #4
 80020a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6999      	ldr	r1, [r3, #24]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	619a      	str	r2, [r3, #24]
      break;
 80020ba:	e064      	b.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fa26 	bl	8002514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6999      	ldr	r1, [r3, #24]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	021a      	lsls	r2, r3, #8
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	619a      	str	r2, [r3, #24]
      break;
 80020fc:	e043      	b.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f000 fa6f 	bl	80025e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69da      	ldr	r2, [r3, #28]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0204 	bic.w	r2, r2, #4
 8002128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69d9      	ldr	r1, [r3, #28]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	61da      	str	r2, [r3, #28]
      break;
 800213c:	e023      	b.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 fab9 	bl	80026bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69d9      	ldr	r1, [r3, #28]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	021a      	lsls	r2, r3, #8
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	61da      	str	r2, [r3, #28]
      break;
 800217e:	e002      	b.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	75fb      	strb	r3, [r7, #23]
      break;
 8002184:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_TIM_ConfigClockSource+0x1c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0b4      	b.n	800231e <HAL_TIM_ConfigClockSource+0x186>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021ec:	d03e      	beq.n	800226c <HAL_TIM_ConfigClockSource+0xd4>
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f2:	f200 8087 	bhi.w	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021fa:	f000 8086 	beq.w	800230a <HAL_TIM_ConfigClockSource+0x172>
 80021fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002202:	d87f      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b70      	cmp	r3, #112	@ 0x70
 8002206:	d01a      	beq.n	800223e <HAL_TIM_ConfigClockSource+0xa6>
 8002208:	2b70      	cmp	r3, #112	@ 0x70
 800220a:	d87b      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b60      	cmp	r3, #96	@ 0x60
 800220e:	d050      	beq.n	80022b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002210:	2b60      	cmp	r3, #96	@ 0x60
 8002212:	d877      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b50      	cmp	r3, #80	@ 0x50
 8002216:	d03c      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0xfa>
 8002218:	2b50      	cmp	r3, #80	@ 0x50
 800221a:	d873      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b40      	cmp	r3, #64	@ 0x40
 800221e:	d058      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002220:	2b40      	cmp	r3, #64	@ 0x40
 8002222:	d86f      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b30      	cmp	r3, #48	@ 0x30
 8002226:	d064      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b30      	cmp	r3, #48	@ 0x30
 800222a:	d86b      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b20      	cmp	r3, #32
 800222e:	d060      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002230:	2b20      	cmp	r3, #32
 8002232:	d867      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05c      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002238:	2b10      	cmp	r3, #16
 800223a:	d05a      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x15a>
 800223c:	e062      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800224e:	f000 fafa 	bl	8002846 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	609a      	str	r2, [r3, #8]
      break;
 800226a:	e04f      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800227c:	f000 fae3 	bl	8002846 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800228e:	609a      	str	r2, [r3, #8]
      break;
 8002290:	e03c      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800229e:	461a      	mov	r2, r3
 80022a0:	f000 fa5a 	bl	8002758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2150      	movs	r1, #80	@ 0x50
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fab1 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80022b0:	e02c      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022be:	461a      	mov	r2, r3
 80022c0:	f000 fa78 	bl	80027b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2160      	movs	r1, #96	@ 0x60
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 faa1 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80022d0:	e01c      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022de:	461a      	mov	r2, r3
 80022e0:	f000 fa3a 	bl	8002758 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2140      	movs	r1, #64	@ 0x40
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fa91 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 80022f0:	e00c      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 fa88 	bl	8002812 <TIM_ITRx_SetConfig>
      break;
 8002302:	e003      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      break;
 8002308:	e000      	b.n	800230c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800230a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800231c:	7bfb      	ldrb	r3, [r7, #15]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a2b      	ldr	r2, [pc, #172]	@ (8002440 <TIM_Base_SetConfig+0xc0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x28>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x28>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a28      	ldr	r2, [pc, #160]	@ (8002444 <TIM_Base_SetConfig+0xc4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a20      	ldr	r2, [pc, #128]	@ (8002440 <TIM_Base_SetConfig+0xc0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <TIM_Base_SetConfig+0x52>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c8:	d003      	beq.n	80023d2 <TIM_Base_SetConfig+0x52>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <TIM_Base_SetConfig+0xc4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d108      	bne.n	80023e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <TIM_Base_SetConfig+0xc0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	611a      	str	r2, [r3, #16]
  }
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40000400 	.word	0x40000400

08002448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 0201 	bic.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 0302 	bic.w	r3, r3, #2
 8002490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a1c      	ldr	r2, [pc, #112]	@ (8002510 <TIM_OC1_SetConfig+0xc8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10c      	bne.n	80024be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f023 0308 	bic.w	r3, r3, #8
 80024aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <TIM_OC1_SetConfig+0xc8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	621a      	str	r2, [r3, #32]
}
 8002504:	bf00      	nop
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40012c00 	.word	0x40012c00

08002514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f023 0210 	bic.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800254a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0320 	bic.w	r3, r3, #32
 800255e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <TIM_OC2_SetConfig+0xd0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10d      	bne.n	8002590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800258e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a14      	ldr	r2, [pc, #80]	@ (80025e4 <TIM_OC2_SetConfig+0xd0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d113      	bne.n	80025c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800259e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	40012c00 	.word	0x40012c00

080025e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f023 0303 	bic.w	r3, r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a1d      	ldr	r2, [pc, #116]	@ (80026b8 <TIM_OC3_SetConfig+0xd0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d10d      	bne.n	8002662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800264c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a14      	ldr	r2, [pc, #80]	@ (80026b8 <TIM_OC3_SetConfig+0xd0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d113      	bne.n	8002692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	621a      	str	r2, [r3, #32]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40012c00 	.word	0x40012c00

080026bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	031b      	lsls	r3, r3, #12
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <TIM_OC4_SetConfig+0x98>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d109      	bne.n	8002730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	019b      	lsls	r3, r3, #6
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	621a      	str	r2, [r3, #32]
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40012c00 	.word	0x40012c00

08002758 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f023 0201 	bic.w	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f023 030a 	bic.w	r3, r3, #10
 8002794:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
 800279c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	621a      	str	r2, [r3, #32]
}
 80027aa:	bf00      	nop
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0210 	bic.w	r2, r3, #16
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	031b      	lsls	r3, r3, #12
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	621a      	str	r2, [r3, #32]
}
 8002808:	bf00      	nop
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	f043 0307 	orr.w	r3, r3, #7
 8002834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b087      	sub	sp, #28
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002860:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	021a      	lsls	r2, r3, #8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	431a      	orrs	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4313      	orrs	r3, r2
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	609a      	str	r2, [r3, #8]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002898:	2302      	movs	r3, #2
 800289a:	e041      	b.n	8002920 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a14      	ldr	r2, [pc, #80]	@ (800292c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d009      	beq.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e8:	d004      	beq.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10c      	bne.n	800290e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400

08002934 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800294c:	2302      	movs	r3, #2
 800294e:	e03d      	b.n	80029cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e042      	b.n	8002a92 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd ff1f 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2224      	movs	r2, #36	@ 0x24
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fdb8 	bl	80035b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695a      	ldr	r2, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b08a      	sub	sp, #40	@ 0x28
 8002a9e:	af02      	add	r7, sp, #8
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d175      	bne.n	8002ba6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_UART_Transmit+0x2c>
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e06e      	b.n	8002ba8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2221      	movs	r2, #33	@ 0x21
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ad8:	f7fd ff96 	bl	8000a08 <HAL_GetTick>
 8002adc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	88fa      	ldrh	r2, [r7, #6]
 8002ae8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002af2:	d108      	bne.n	8002b06 <HAL_UART_Transmit+0x6c>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d104      	bne.n	8002b06 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e003      	b.n	8002b0e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b0e:	e02e      	b.n	8002b6e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2200      	movs	r2, #0
 8002b18:	2180      	movs	r1, #128	@ 0x80
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fb1d 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e03a      	b.n	8002ba8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b46:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e007      	b.n	8002b60 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1cb      	bne.n	8002b10 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2140      	movs	r1, #64	@ 0x40
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fae9 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e006      	b.n	8002ba8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	d112      	bne.n	8002bf0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_UART_Receive_IT+0x26>
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00b      	b.n	8002bf2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002be0:	88fb      	ldrh	r3, [r7, #6]
 8002be2:	461a      	mov	r2, r3
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 fb10 	bl	800320c <UART_Start_Receive_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	e000      	b.n	8002bf2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b0ba      	sub	sp, #232	@ 0xe8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_UART_IRQHandler+0x66>
 8002c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fbec 	bl	8003438 <UART_Receive_IT>
      return;
 8002c60:	e25b      	b.n	800311a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 80de 	beq.w	8002e28 <HAL_UART_IRQHandler+0x22c>
 8002c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80d1 	beq.w	8002e28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_UART_IRQHandler+0xae>
 8002c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_UART_IRQHandler+0xd2>
 8002cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f043 0202 	orr.w	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_UART_IRQHandler+0xf6>
 8002cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d011      	beq.n	8002d22 <HAL_UART_IRQHandler+0x126>
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f043 0208 	orr.w	r2, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 81f2 	beq.w	8003110 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_UART_IRQHandler+0x14e>
 8002d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fb77 	bl	8003438 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_UART_IRQHandler+0x17a>
 8002d6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d04f      	beq.n	8002e16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa81 	bl	800327e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d041      	beq.n	8002e0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3314      	adds	r3, #20
 8002db2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002db6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002dba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002dc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002dc6:	e841 2300 	strex	r3, r2, [r1]
 8002dca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1d9      	bne.n	8002d8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d013      	beq.n	8002e06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	4a7e      	ldr	r2, [pc, #504]	@ (8002fdc <HAL_UART_IRQHandler+0x3e0>)
 8002de4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd ff5e 	bl	8000cac <HAL_DMA_Abort_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e00:	4610      	mov	r0, r2
 8002e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e00e      	b.n	8002e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f993 	bl	8003132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	e00a      	b.n	8002e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f98f 	bl	8003132 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	e006      	b.n	8002e24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f98b 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e22:	e175      	b.n	8003110 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e24:	bf00      	nop
    return;
 8002e26:	e173      	b.n	8003110 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	f040 814f 	bne.w	80030d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8148 	beq.w	80030d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8141 	beq.w	80030d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 80b6 	beq.w	8002fe0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8145 	beq.w	8003114 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e92:	429a      	cmp	r2, r3
 8002e94:	f080 813e 	bcs.w	8003114 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f000 8088 	beq.w	8002fbc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002eba:	e853 3f00 	ldrex	r3, [r3]
 8002ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002ed8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002edc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ee4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1d9      	bne.n	8002eac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3314      	adds	r3, #20
 8002efe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f02:	e853 3f00 	ldrex	r3, [r3]
 8002f06:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f1c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f20:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f24:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f28:	e841 2300 	strex	r3, r2, [r1]
 8002f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e1      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3314      	adds	r3, #20
 8002f3a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f3e:	e853 3f00 	ldrex	r3, [r3]
 8002f42:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f58:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f5e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e3      	bne.n	8002f34 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f8c:	f023 0310 	bic.w	r3, r3, #16
 8002f90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	330c      	adds	r3, #12
 8002f9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002f9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fa0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fa6:	e841 2300 	strex	r3, r2, [r1]
 8002faa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e3      	bne.n	8002f7a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fe3d 	bl	8000c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f8b6 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fd8:	e09c      	b.n	8003114 <HAL_UART_IRQHandler+0x518>
 8002fda:	bf00      	nop
 8002fdc:	08003343 	.word	0x08003343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 808e 	beq.w	8003118 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8089 	beq.w	8003118 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003018:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800301c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800302a:	647a      	str	r2, [r7, #68]	@ 0x44
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1e3      	bne.n	8003006 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3314      	adds	r3, #20
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	623b      	str	r3, [r7, #32]
   return(result);
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3314      	adds	r3, #20
 800305e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003062:	633a      	str	r2, [r7, #48]	@ 0x30
 8003064:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800306a:	e841 2300 	strex	r3, r2, [r1]
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1e3      	bne.n	800303e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	60fb      	str	r3, [r7, #12]
   return(result);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0310 	bic.w	r3, r3, #16
 800309a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	330c      	adds	r3, #12
 80030a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030a8:	61fa      	str	r2, [r7, #28]
 80030aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	69b9      	ldr	r1, [r7, #24]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	617b      	str	r3, [r7, #20]
   return(result);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e3      	bne.n	8003084 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f83b 	bl	8003144 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ce:	e023      	b.n	8003118 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d009      	beq.n	80030f0 <HAL_UART_IRQHandler+0x4f4>
 80030dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f93e 	bl	800336a <UART_Transmit_IT>
    return;
 80030ee:	e014      	b.n	800311a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <HAL_UART_IRQHandler+0x51e>
 80030fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f97d 	bl	8003408 <UART_EndTransmit_IT>
    return;
 800310e:	e004      	b.n	800311a <HAL_UART_IRQHandler+0x51e>
    return;
 8003110:	bf00      	nop
 8003112:	e002      	b.n	800311a <HAL_UART_IRQHandler+0x51e>
      return;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_UART_IRQHandler+0x51e>
      return;
 8003118:	bf00      	nop
  }
}
 800311a:	37e8      	adds	r7, #232	@ 0xe8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	e03b      	b.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003172:	d037      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7fd fc48 	bl	8000a08 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <UART_WaitOnFlagUntilTimeout+0x30>
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e03a      	b.n	8003204 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d023      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b80      	cmp	r3, #128	@ 0x80
 80031a0:	d020      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d01d      	beq.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d116      	bne.n	80031e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f856 	bl	800327e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2208      	movs	r2, #8
 80031d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e00f      	b.n	8003204 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d0b4      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2222      	movs	r2, #34	@ 0x22
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003250:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0220 	orr.w	r2, r2, #32
 8003270:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800327e:	b480      	push	{r7}
 8003280:	b095      	sub	sp, #84	@ 0x54
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	330c      	adds	r3, #12
 800328c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800329c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80032a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e5      	bne.n	8003286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3314      	adds	r3, #20
 80032c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3314      	adds	r3, #20
 80032d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d119      	bne.n	800332a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	60bb      	str	r3, [r7, #8]
   return(result);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f023 0310 	bic.w	r3, r3, #16
 800330c:	647b      	str	r3, [r7, #68]	@ 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003316:	61ba      	str	r2, [r7, #24]
 8003318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	613b      	str	r3, [r7, #16]
   return(result);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e5      	bne.n	80032f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003338:	bf00      	nop
 800333a:	3754      	adds	r7, #84	@ 0x54
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff fee8 	bl	8003132 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800336a:	b480      	push	{r7}
 800336c:	b085      	sub	sp, #20
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b21      	cmp	r3, #33	@ 0x21
 800337c:	d13e      	bne.n	80033fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003386:	d114      	bne.n	80033b2 <UART_Transmit_IT+0x48>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d110      	bne.n	80033b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	e008      	b.n	80033c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6211      	str	r1, [r2, #32]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4619      	mov	r1, r3
 80033d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10f      	bne.n	80033f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800341e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fe79 	bl	8003120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08c      	sub	sp, #48	@ 0x30
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b22      	cmp	r3, #34	@ 0x22
 800344a:	f040 80ae 	bne.w	80035aa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003456:	d117      	bne.n	8003488 <UART_Receive_IT+0x50>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d113      	bne.n	8003488 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003468:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	b29a      	uxth	r2, r3
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	629a      	str	r2, [r3, #40]	@ 0x28
 8003486:	e026      	b.n	80034d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800348e:	2300      	movs	r3, #0
 8003490:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349a:	d007      	beq.n	80034ac <UART_Receive_IT+0x74>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10a      	bne.n	80034ba <UART_Receive_IT+0x82>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e008      	b.n	80034cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4619      	mov	r1, r3
 80034e4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d15d      	bne.n	80035a6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0220 	bic.w	r2, r2, #32
 80034f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003508:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	2b01      	cmp	r3, #1
 800352e:	d135      	bne.n	800359c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	613b      	str	r3, [r7, #16]
   return(result);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f023 0310 	bic.w	r3, r3, #16
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	330c      	adds	r3, #12
 8003554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003556:	623a      	str	r2, [r7, #32]
 8003558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	69f9      	ldr	r1, [r7, #28]
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	61bb      	str	r3, [r7, #24]
   return(result);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e5      	bne.n	8003536 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b10      	cmp	r3, #16
 8003576:	d10a      	bne.n	800358e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fdd5 	bl	8003144 <HAL_UARTEx_RxEventCallback>
 800359a:	e002      	b.n	80035a2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7fc ff47 	bl	8000430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e002      	b.n	80035ac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3730      	adds	r7, #48	@ 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80035ee:	f023 030c 	bic.w	r3, r3, #12
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	430b      	orrs	r3, r1
 80035fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <UART_SetConfig+0x114>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800361c:	f7fe fb30 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	e002      	b.n	800362a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7fe fb18 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8003628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <UART_SetConfig+0x118>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	0119      	lsls	r1, r3, #4
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009a      	lsls	r2, r3, #2
 8003654:	441a      	add	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003660:	4b1a      	ldr	r3, [pc, #104]	@ (80036cc <UART_SetConfig+0x118>)
 8003662:	fba3 0302 	umull	r0, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2064      	movs	r0, #100	@ 0x64
 800366a:	fb00 f303 	mul.w	r3, r0, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	3332      	adds	r3, #50	@ 0x32
 8003674:	4a15      	ldr	r2, [pc, #84]	@ (80036cc <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003680:	4419      	add	r1, r3
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009a      	lsls	r2, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	fbb2 f2f3 	udiv	r2, r2, r3
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <UART_SetConfig+0x118>)
 800369a:	fba3 0302 	umull	r0, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2064      	movs	r0, #100	@ 0x64
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	3332      	adds	r3, #50	@ 0x32
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <UART_SetConfig+0x118>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	440a      	add	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013800 	.word	0x40013800
 80036cc:	51eb851f 	.word	0x51eb851f

080036d0 <_strtoul_l.isra.0>:
 80036d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036d4:	4686      	mov	lr, r0
 80036d6:	460d      	mov	r5, r1
 80036d8:	4e33      	ldr	r6, [pc, #204]	@ (80037a8 <_strtoul_l.isra.0+0xd8>)
 80036da:	4628      	mov	r0, r5
 80036dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036e0:	5d37      	ldrb	r7, [r6, r4]
 80036e2:	f017 0708 	ands.w	r7, r7, #8
 80036e6:	d1f8      	bne.n	80036da <_strtoul_l.isra.0+0xa>
 80036e8:	2c2d      	cmp	r4, #45	@ 0x2d
 80036ea:	d110      	bne.n	800370e <_strtoul_l.isra.0+0x3e>
 80036ec:	2701      	movs	r7, #1
 80036ee:	782c      	ldrb	r4, [r5, #0]
 80036f0:	1c85      	adds	r5, r0, #2
 80036f2:	f033 0010 	bics.w	r0, r3, #16
 80036f6:	d115      	bne.n	8003724 <_strtoul_l.isra.0+0x54>
 80036f8:	2c30      	cmp	r4, #48	@ 0x30
 80036fa:	d10d      	bne.n	8003718 <_strtoul_l.isra.0+0x48>
 80036fc:	7828      	ldrb	r0, [r5, #0]
 80036fe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003702:	2858      	cmp	r0, #88	@ 0x58
 8003704:	d108      	bne.n	8003718 <_strtoul_l.isra.0+0x48>
 8003706:	786c      	ldrb	r4, [r5, #1]
 8003708:	3502      	adds	r5, #2
 800370a:	2310      	movs	r3, #16
 800370c:	e00a      	b.n	8003724 <_strtoul_l.isra.0+0x54>
 800370e:	2c2b      	cmp	r4, #43	@ 0x2b
 8003710:	bf04      	itt	eq
 8003712:	782c      	ldrbeq	r4, [r5, #0]
 8003714:	1c85      	addeq	r5, r0, #2
 8003716:	e7ec      	b.n	80036f2 <_strtoul_l.isra.0+0x22>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f6      	bne.n	800370a <_strtoul_l.isra.0+0x3a>
 800371c:	2c30      	cmp	r4, #48	@ 0x30
 800371e:	bf14      	ite	ne
 8003720:	230a      	movne	r3, #10
 8003722:	2308      	moveq	r3, #8
 8003724:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8003728:	fbb8 f8f3 	udiv	r8, r8, r3
 800372c:	2600      	movs	r6, #0
 800372e:	fb03 f908 	mul.w	r9, r3, r8
 8003732:	4630      	mov	r0, r6
 8003734:	ea6f 0909 	mvn.w	r9, r9
 8003738:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800373c:	f1bc 0f09 	cmp.w	ip, #9
 8003740:	d810      	bhi.n	8003764 <_strtoul_l.isra.0+0x94>
 8003742:	4664      	mov	r4, ip
 8003744:	42a3      	cmp	r3, r4
 8003746:	dd1e      	ble.n	8003786 <_strtoul_l.isra.0+0xb6>
 8003748:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800374c:	d007      	beq.n	800375e <_strtoul_l.isra.0+0x8e>
 800374e:	4580      	cmp	r8, r0
 8003750:	d316      	bcc.n	8003780 <_strtoul_l.isra.0+0xb0>
 8003752:	d101      	bne.n	8003758 <_strtoul_l.isra.0+0x88>
 8003754:	45a1      	cmp	r9, r4
 8003756:	db13      	blt.n	8003780 <_strtoul_l.isra.0+0xb0>
 8003758:	2601      	movs	r6, #1
 800375a:	fb00 4003 	mla	r0, r0, r3, r4
 800375e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003762:	e7e9      	b.n	8003738 <_strtoul_l.isra.0+0x68>
 8003764:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003768:	f1bc 0f19 	cmp.w	ip, #25
 800376c:	d801      	bhi.n	8003772 <_strtoul_l.isra.0+0xa2>
 800376e:	3c37      	subs	r4, #55	@ 0x37
 8003770:	e7e8      	b.n	8003744 <_strtoul_l.isra.0+0x74>
 8003772:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8003776:	f1bc 0f19 	cmp.w	ip, #25
 800377a:	d804      	bhi.n	8003786 <_strtoul_l.isra.0+0xb6>
 800377c:	3c57      	subs	r4, #87	@ 0x57
 800377e:	e7e1      	b.n	8003744 <_strtoul_l.isra.0+0x74>
 8003780:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8003784:	e7eb      	b.n	800375e <_strtoul_l.isra.0+0x8e>
 8003786:	1c73      	adds	r3, r6, #1
 8003788:	d106      	bne.n	8003798 <_strtoul_l.isra.0+0xc8>
 800378a:	2322      	movs	r3, #34	@ 0x22
 800378c:	4630      	mov	r0, r6
 800378e:	f8ce 3000 	str.w	r3, [lr]
 8003792:	b932      	cbnz	r2, 80037a2 <_strtoul_l.isra.0+0xd2>
 8003794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003798:	b107      	cbz	r7, 800379c <_strtoul_l.isra.0+0xcc>
 800379a:	4240      	negs	r0, r0
 800379c:	2a00      	cmp	r2, #0
 800379e:	d0f9      	beq.n	8003794 <_strtoul_l.isra.0+0xc4>
 80037a0:	b106      	cbz	r6, 80037a4 <_strtoul_l.isra.0+0xd4>
 80037a2:	1e69      	subs	r1, r5, #1
 80037a4:	6011      	str	r1, [r2, #0]
 80037a6:	e7f5      	b.n	8003794 <_strtoul_l.isra.0+0xc4>
 80037a8:	080038ab 	.word	0x080038ab

080037ac <strtoul>:
 80037ac:	4613      	mov	r3, r2
 80037ae:	460a      	mov	r2, r1
 80037b0:	4601      	mov	r1, r0
 80037b2:	4802      	ldr	r0, [pc, #8]	@ (80037bc <strtoul+0x10>)
 80037b4:	6800      	ldr	r0, [r0, #0]
 80037b6:	f7ff bf8b 	b.w	80036d0 <_strtoul_l.isra.0>
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c

080037c0 <memset>:
 80037c0:	4603      	mov	r3, r0
 80037c2:	4402      	add	r2, r0
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d100      	bne.n	80037ca <memset+0xa>
 80037c8:	4770      	bx	lr
 80037ca:	f803 1b01 	strb.w	r1, [r3], #1
 80037ce:	e7f9      	b.n	80037c4 <memset+0x4>

080037d0 <__libc_init_array>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	2600      	movs	r6, #0
 80037d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003808 <__libc_init_array+0x38>)
 80037d6:	4c0d      	ldr	r4, [pc, #52]	@ (800380c <__libc_init_array+0x3c>)
 80037d8:	1b64      	subs	r4, r4, r5
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	42a6      	cmp	r6, r4
 80037de:	d109      	bne.n	80037f4 <__libc_init_array+0x24>
 80037e0:	f000 f81a 	bl	8003818 <_init>
 80037e4:	2600      	movs	r6, #0
 80037e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003810 <__libc_init_array+0x40>)
 80037e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003814 <__libc_init_array+0x44>)
 80037ea:	1b64      	subs	r4, r4, r5
 80037ec:	10a4      	asrs	r4, r4, #2
 80037ee:	42a6      	cmp	r6, r4
 80037f0:	d105      	bne.n	80037fe <__libc_init_array+0x2e>
 80037f2:	bd70      	pop	{r4, r5, r6, pc}
 80037f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f8:	4798      	blx	r3
 80037fa:	3601      	adds	r6, #1
 80037fc:	e7ee      	b.n	80037dc <__libc_init_array+0xc>
 80037fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003802:	4798      	blx	r3
 8003804:	3601      	adds	r6, #1
 8003806:	e7f2      	b.n	80037ee <__libc_init_array+0x1e>
 8003808:	080039b4 	.word	0x080039b4
 800380c:	080039b4 	.word	0x080039b4
 8003810:	080039b4 	.word	0x080039b4
 8003814:	080039b8 	.word	0x080039b8

08003818 <_init>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr

08003824 <_fini>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr
